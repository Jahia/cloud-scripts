---
type: update
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: updateunomi_actions_and_events-v1.1.0


onAfterServiceScaleOut[es]:
  - setSomeGlobals
  - setupES
  - setReplica
  - updateReplica
  - setupDatadogAgentEs: es

onAfterServiceScaleIn[es]:
  - setSomeGlobals
  - setupES
  - setReplica
  - updateReplica

actions:
  setSomeGlobals:
    setGlobals:
      PRONAME: "UNOMI"

  setupES:
    forEach(nodes.es):
      cmd[${@i.id}]: |-
        /usr/share/elasticsearch/bin/elasticsearch-plugin install repository-azure
        /usr/share/elasticsearch/bin/elasticsearch-plugin install repository-s3
        /usr/share/elasticsearch/bin/elasticsearch --version
        es_major_version=$(/usr/share/elasticsearch/bin/elasticsearch --version | cut -d"." -f1 | cut -d" " -f2)
        es_conf=/etc/elasticsearch/elasticsearch.yml
        ipadd=$(ip a s scope global | awk '$1=="inet" {split($2, ipad, "/"); print ipad[1]}')
        node_name=$(awk -v ipadd=$ipadd '$1==ipadd && $2~/^es_[0-9]+$/ {print $2; exit}' /etc/hosts)
        # some cleaning in case of an update
        sed -e '/^path\.repo/d' \
            -e '/^node\.name/d' \
            -e '/^discovery\.zen\./d' \
            -e '/^discovery\.seed\./d' \
            -e '/^cluster\.initial\./d' \
            -i $es_conf
        sed 's/\(^discovery.type: single-node\)/#\1/' -i $es_conf
        echo "node.name: $node_name" >> $es_conf
        hosts_list=$(awk '$2~/^es_[0-9]+$/ {nodes[$2]} END{asorti(nodes);printf "["; for(n=1;n<=length(nodes);n++){if(n<length(nodes)){sep=", "}else{sep="]"}; printf "\"%s\"%s",nodes[n],sep}}' /etc/hosts)
        discovery_hosts_parameter_name="discovery.zen.ping.unicast.hosts"
        if [ $es_major_version -ge 7 ]; then
          discovery_hosts_parameter_name="discovery.seed_hosts"
          echo "cluster.initial_master_nodes: $hosts_list" >> $es_conf
        fi
        echo "$discovery_hosts_parameter_name: $hosts_list" >> $es_conf
        echo "discovery.zen.minimum_master_nodes: $(expr ${nodes.es.length} / 2 + 1)" >> $es_conf
        systemctl enable elasticsearch
        systemctl restart elasticsearch

  setReplica:
    - if(nodes.es.length > 1):
        - if(nodes.es.length > 4):
          - setGlobals:
              - replica: 2
        - else:
          - setGlobals:
              - replica: 1
    - else:
        setGlobals:
          - replica: 0
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          # test if not update needed
          actual=$(awk -F'=' '/${PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS/ {print $NF}' $setenv)
          if [ ! -z "$actual" ]; then
            if [ $actual -eq ${globals.replica} ]; then
              echo "$(hostname) already get the good replica parameters (${globals.replica})"
              exit 0
            fi
          fi
          # some cleaning in case of an update
          sed '/^export ${globals.PRONAME}_ELASTICSEARCH/d' -i $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_MONTHLYINDEX_REPLICAS=${globals.replica}" >> $setenv
          echo "export ${globals.PRONAME}_ELASTICSEARCH_DEFAULTINDEX_REPLICAS=${globals.replica}" >> $setenv
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root

  updateReplica:
    - cmd[${nodes.es.first.id}]: |-
        curl -s http://$(hostname):9200/_cat/indices | awk -v repl=${globals.replica} '$6>repl {print $3}' | while read index; do
            curl -s -XPUT http://$(hostname):9200/$index/_settings \
              -H "Content-Type: application/json" \
              -d '{"index":{"number_of_replicas": ${globals.replica} }}'
        done
