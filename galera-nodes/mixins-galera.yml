---
actions:
  is_fullreadonly_enabled:
    - cmd[proc]: |-
        RO_ON=$(ssh abricot@localhost -p 8101 -i /tmp/abricot -o StrictHostKeyChecking=no full-read-only | grep -e Current -e local | grep ON)
        if [ "$RO_ON" == "" ]; then
          echo false
        else
          echo true
        fi
    - setGlobals:
        RO: "${response.out}"

  switch-fullreadonly:
    - log: "switch full read mode to ${this.fullreadmode} on nodegroup ${this.group}"
    - cmd[${this.group}]: |-
          ssh abricot@localhost -p 8101 -i /tmp/abricot -o StrictHostKeyChecking=no full-read-only ${this.fullreadmode}

  getJahiaVersion:
    - log: "Get jahia version"
    - script: |-
        var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session)
        for (var i = 0, g = resp.nodes; i < g.length; i++) {
          if (g[i].nodeGroup == "proc") {
            var jahia_version = g[i].version.split("-", 1)[0]
            break
            }
          }
        return {'result': 0, 'jahia_version': jahia_version}
    - setGlobals:
        jahiaVersion: ${response.jahia_version}
    - log: "Jahia is v${globals.jahiaVersion}"

  enable_karaf_login:
    - log: "Activate karaf's ssh login on ${this}'s nodegroup"
    - cmd[${this}]: |-
        [ -f /tmp/abricot ] && rm /tmp/abricot
        [ -f /tmp/abricot.pub  ] && rm /tmp/abricot.pub
        ssh-keygen -t rsa -f /tmp/abricot -P ""
        awk '{printf "abricot:%s,_g_:admingroup\n",$2}' /tmp/abricot.pub >> /data/digital-factory-data/karaf/etc/keys.properties
        sed 's,\(sshRealm\s*=\s*\)jahia,\1karaf,' -i /data/digital-factory-data/karaf/etc/org.apache.karaf.shell.cfg
        i=1
        it=66
        until (ssh abricot@localhost -p 8101 -i /tmp/abricot -o StrictHostKeyChecking=no full-read-only); do
          echo "karaf ssh login not updated yet (iteration $i/$it)"
          if [ $i -ge $it ]; then
            echo "Too long to start, something is wrong here... EXITING"
            exit 1
          fi
          ((i++))
          sleep 1
        done
  disable_karaf_login:
    - log: "Disable karaf's ssh login on ${this}'s nodegroup"
    - cmd[${this}]: |-
        [ -f /tmp/abricot  ] && rm /tmp/abricot
        [ -f /tmp/abricot.pub  ] && rm /tmp/abricot.pub
        sed '/^abricot:/d' -i /data/digital-factory-data/karaf/etc/keys.properties
        sed 's,\(sshRealm\s*=\s*\)karaf,\1jahia,' -i /data/digital-factory-data/karaf/etc/org.apache.karaf.shell.cfg

  enableFullReadOnlyOnCluster:
    - getJahiaVersion

    - enable_karaf_login: proc
    - is_fullreadonly_enabled

    - if(!${globals.RO}):
        - switch-fullreadonly:
            group: "proc"
            fullreadmode: "ON"

        - if(globals.jahiaVersion < '7.3.3.0'):
            - enable_karaf_login: cp
            - switch-fullreadonly:
                group: "cp"
                fullreadmode: "ON"

  disableFullReadOnlyOnCluster:
    - getJahiaVersion
    - is_fullreadonly_enabled

    - if(${globals.RO}):
        - switch-fullreadonly:
            group: "proc"
            fullreadmode: "OFF"
        - disable_karaf_login: proc

        - if(globals.jahiaVersion < '7.3.3.0'):
            - switch-fullreadonly:
                group: "cp"
                fullreadmode: "OFF"
            - disable_karaf_login: cp

  stopGalera:
    cmd[${this}]: |-
      service mysql stop || exit 1
      if [ -f /var/lib/mysql/grastate.dat ]; then
        cat /var/lib/mysql/grastate.dat
      else
        echo "$HOSTNAME is not in a cluster"
      fi
      service mysql stop
    user: root

  startGalera:
    cmd[${this}]: |-
      service mysql start
      rc=$?
      if [ ! -f /var/lib/mysql/grastate.dat ]; then
        echo "$HOSTNAME is not in a cluster, exiting"
        exit $rc
      fi
      i=1
      it=66
      until [ "$(mysql -Ns -e "show global status like 'wsrep_local_state_comment'" | awk '{print $NF}')" == "Synced"  ]; do
        echo "$(date) not ready yet (iteration $i/$it)"
        if [ $i -ge $it ]; then
          echo "Too long to start, something is wrong here... EXITING"
          exit 1
        fi
        sleep 1
        ((i++))
      done
      echo "Node $HOSTNAME is now Synced !"
    user: root
